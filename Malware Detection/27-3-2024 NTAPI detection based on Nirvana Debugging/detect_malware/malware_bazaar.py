import json
import requests
import logging
import time
from datetime import datetime
from utils import *

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s',
                    filename='app.log', filemode='w', encoding='utf-8')

api_keys = ["e2a3ee5bffabba0e1412fe1d3aa91799"]


class MalwareBazaar:
    BASE_URL_API = "https://mb-api.abuse.ch/api/v1/"

    def __init__(self, api_keys):
        self.api_keys = api_keys
        self.previous_samples = set('')
        self.queries = load_config()['malware_bazaar']

    def send_request(self, data, header):
        try:
            response = requests.post(self.BASE_URL_API, data=data, headers=header)
            response.raise_for_status()  # check error http
            return response
        except requests.exceptions.RequestException as e:
            logging.error(f"Error sending request: {e}")
            return None

    def send_query(self, query_type, **kwargs):
        params = self.queries[query_type]['params']
        if not check_params(params, **kwargs):
            return None
        json_data = {0}
        for api_key in self.api_keys:
            header = {'API-KEY': api_key}
            response = self.send_request(params, header)
            if response is not None:
                try:
                    json_data = response.json()
                    break  # if you have data, break loop
                except Exception as e:
                    with open(f"{1}.zip", "wb") as f:
                        f.write(response.content)
                    logging.error(f"Error parsing JSON response: {e}")
                    # not return for next api_key
        logging.info(f"[+] Query Status: {json_data['query_status']}")
        return json_data

    def get_new_samples(self, query_type, **kwargs):
            while True:
                response_json = self.send_query(query_type, **kwargs)
                if response_json["query_status"] != "ok":
                    logging.error(f"Query Status {response_json["query_status"]}")
                    break
                recent_samples = response_json["data"]
                new_samples = [sample for sample in recent_samples if
                               sample["sha256_hash"] not in self.previous_samples]
                if new_samples:
                    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                    filename = f"new_samples_{current_time}.json"

                    try:
                        with open(filename, "w", encoding="utf-8") as f:
                            json_data = {"data": new_samples}
                            json.dump(json_data, f, indent=4, ensure_ascii=False)
                            f.flush()
                    except Exception as e:
                        logging.error(f"Error writing to file: {e}")
                    finally:
                        f.close()

                    for sample in new_samples:
                        sample_hash = sample["sha256_hash"]
                        self.previous_samples.add(sample_hash)

                print("Sleeping 30 seconds ...")
                time.sleep(1800)


if __name__ == '__main__':
    mb = MalwareBazaar(api_keys)
    # mb.get_new_samples('get_recent_sample')
    mb.send_query('download_sample', sha256_hash='ff871d0cc69654df80b4e87e278814af98e68add44398f5d002bc8c7f0a347c4')
